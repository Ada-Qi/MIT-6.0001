# Problem Set 2, hangman.py
# Name: 
# Collaborators:
# Time spent:

# Hangman Game
# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)
import random
import string

WORDLIST_FILENAME = "words.txt"


def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist



def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)
    
    Returns a word from wordlist at random
    """
    return random.choice(wordlist)

# end of helper code

# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = load_words()


def is_word_guessed(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are
      lowercase
    letters_guessed: list (of letters), which letters have been guessed so far;
      assumes that all letters are lowercase
    returns: boolean, True if all the letters of secret_word are in letters_guessed;
      False otherwise
    '''
    
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    for secret_char in secret_word:
        I = 0
        if secret_char not in letters_guessed:
            I += 1
            break
    return I == 0



def get_guessed_word(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string, comprised of letters, underscores (_), and spaces that represents
      which letters in secret_word have been guessed so far.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    guessing = ''
    for char in secret_word:
        if char in letters_guessed:
            guessing += char
        else:
            guessing += '_ '
    return guessing



def get_available_letters(letters_guessed):
    '''
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string (of letters), comprised of letters that represents which letters have not
      yet been guessed.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    letters_available = ''
    import string
    for char in string.ascii_lowercase:
        if char not in letters_guessed:
            letters_available += char
    return letters_available
    

def hangman(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!
    
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
    
    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"

    letters_guessed = ''
    
    guesses_left = 6
    
    warnings_left = 3
    
    vowels = 'aeiou'


    '''
    (Need the number of unique letters in secret_word to count the total score)
    '''
    def get_unique_letters(secret_word):
        unique_letters = ''
        for index in range(len(secret_word)):
            if secret_word[index] not in secret_word[:index:] and secret_word[index] not in secret_word[index + 1::]:
                unique_letters += secret_word[index]
        return unique_letters

    unique_letters = get_unique_letters(secret_word)


    
    print('Welcome to the game Hangman!')
    print('I am thinking of a word that is', len(secret_word), 'letters long.')
    print('You have', warnings_left, 'warnings left.')


    '''
    [Interaction Starts]
    '''
    while True:

        print('-------------')
        

        '''
        [Termination - Win]
        '''
        if is_word_guessed(secret_word, letters_guessed):
            print('Congratulations, you won!')
            print('Your total score for this game is:', guesses_left * len(unique_letters))
            break


        '''
        [Termination - Lose]
        '''
        if guesses_left <= 0:
            print('Sorry, you ran out of guesses. The word was', secret_word+'.')
            break



        print('You have', guesses_left, 'guesses left.')
        print('Available letters:', get_available_letters(letters_guessed))
        new_letter_guessed = input('Please guess a letter: ')


        #[Input Judgement - valid letters]
        if str.isalpha(new_letter_guessed) and new_letter_guessed not in letters_guessed:
            letters_guessed += new_letter_guessed
            if new_letter_guessed in secret_word:
                print('Good guess:', get_guessed_word(secret_word, letters_guessed))
            else:
                print('Oops! That letter is not in my word:', get_guessed_word(secret_word, letters_guessed))
                if new_letter_guessed in vowels:
                    guesses_left -= 2
                else:
                    guesses_left -= 1

        
        #[Input Judgement - guessed letters]
        elif new_letter_guessed in letters_guessed:
            if warnings_left != 0:
                warnings_left -= 1
                print("Oops! You've already guessed that letter. You have", warnings_left, "warnings left:", get_guessed_word(secret_word, letters_guessed))
            else:
                guesses_left -= 1
                print("Oops! You've already guessed that letter. You have no warnings left so you lose one guess:", get_guessed_word(secret_word, letters_guessed))


        #[Input Judgement - invalid letters]
        else:
            if warnings_left != 0:
                warnings_left -= 1
                print('Oops! That is not a valid letter. You have', warnings_left, 'warnings left:', get_guessed_word(secret_word, letters_guessed))
            else:
                guesses_left -= 1
                print("Oops! That is not a valid letter. You have no warnings left so you lose one guess:", get_guessed_word(secret_word, letters_guessed))
    
            




# When you've completed your hangman function, scroll down to the bottom
# of the file and uncomment the first two lines to test
#(hint: you might want to pick your own
# secret_word while you're doing your own testing)


# -----------------------------------



def match_with_gaps(my_word, other_word):
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the 
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise: 
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"

    I = 0
    my_word_len = my_word.replace(' ', '')
    
    if len(my_word_len) != len(other_word):
        I += 1
        
    else:
        for index in range(len(my_word_len)):
            if my_word_len[index] != '_' and my_word_len[index] != other_word[index]:
                I += 1
                break
            elif my_word_len[index] == '_' and other_word[index] in my_word_len:
                I += 1
                break

    return I == 0
    


def show_possible_matches(my_word):
    '''
    my_word: string with _ characters, current guess of secret word
    returns: nothing, but should print out every word in wordlist that matches my_word
             Keep in mind that in hangman when a letter is guessed, all the positions
             at which that letter occurs in the secret word are revealed.
             Therefore, the hidden letter(_ ) cannot be one of the letters in the word
             that has already been revealed.

    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    possible_list = ''
    for word in wordlist:
        if match_with_gaps(my_word, word):
            possible_list += word + ' '
    if possible_list != '':
        print(possible_list)
    else:
        print('No matches found')



def hangman_with_hints(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses
    
    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Make sure to check that the user guesses a letter
      
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
      
    * If the guess is the symbol *, print out all words in wordlist that
      matches the current guessed word. 
    
    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    letters_guessed = ''
    
    guesses_left = 6
    
    warnings_left = 3
    
    vowels = 'aeiou'


    '''
    (Need the number of unique letters in secret_word to count the total score)
    '''
    def get_unique_letters(secret_word):
        unique_letters = ''
        for index in range(len(secret_word)):
            if secret_word[index] not in secret_word[:index:] and secret_word[index] not in secret_word[index + 1::]:
                unique_letters += secret_word[index]
        return unique_letters

    unique_letters = get_unique_letters(secret_word)


    
    print('Welcome to the game Hangman!')
    print('I am thinking of a word that is', len(secret_word), 'letters long.')
    print('You have', warnings_left, 'warnings left.')


    '''
    [Interaction Starts]
    '''
    while True:

        print('-------------')
        

        '''
        [Termination - Win]
        '''
        if is_word_guessed(secret_word, letters_guessed):
            print('Congratulations, you won!')
            print('Your total score for this game is:', guesses_left * len(unique_letters))
            break


        '''
        [Termination - Lose]
        '''
        if guesses_left <= 0:
            print('Sorry, you ran out of guesses. The word was', secret_word+'.')
            break



        print('You have', guesses_left, 'guesses left.')
        print('Available letters:', get_available_letters(letters_guessed))
        new_letter_guessed = input('Please guess a letter: ')



        #[Ask for hint]
        if new_letter_guessed == '*':
            print('Possible word matches are:')
            show_possible_matches(get_guessed_word(secret_word, letters_guessed))


        #[Input Judgement - valid letters]
        elif str.isalpha(new_letter_guessed) and new_letter_guessed not in letters_guessed:
            letters_guessed += new_letter_guessed
            if new_letter_guessed in secret_word:
                print('Good guess:', get_guessed_word(secret_word, letters_guessed))
            else:
                print('Oops! That letter is not in my word:', get_guessed_word(secret_word, letters_guessed))
                if new_letter_guessed in vowels:
                    guesses_left -= 2
                else:
                    guesses_left -= 1


        #[Input Judgement - guessed letters]
        elif new_letter_guessed in letters_guessed:
            if warnings_left != 0:
                warnings_left -= 1
                print("Oops! You've already guessed that letter. You have", warnings_left, "warnings left:", get_guessed_word(secret_word, letters_guessed))
            else:
                guesses_left -= 1
                print("Oops! You've already guessed that letter. You have no warnings left so you lose one guess:", get_guessed_word(secret_word, letters_guessed))



        #[Input Judgement - invalid letters]
        else:
            if warnings_left != 0:
                warnings_left -= 1
                print('Oops! That is not a valid letter. You have', warnings_left, 'warnings left:', get_guessed_word(secret_word, letters_guessed))
            else:
                guesses_left -= 1
                print("Oops! That is not a valid letter. You have no warnings left so you lose one guess:", get_guessed_word(secret_word, letters_guessed))
    
            




# When you've completed your hangman_with_hint function, comment the two similar
# lines above that were used to run the hangman function, and then uncomment
# these two lines and run this file to test!
# Hint: You might want to pick your own secret_word while you're testing.


if __name__ == "__main__":
    pass

    # To test part 2, comment out the pass line above and
    # uncomment the following two lines.
    
#secret_word = choose_word(wordlist)
#hangman(secret_word)

###############
    
    # To test part 3 re-comment out the above lines and 
    # uncomment the following two lines. 
    
#secret_word = choose_word(wordlist)
#hangman_with_hints(secret_word)
