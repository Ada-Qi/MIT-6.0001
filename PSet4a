# Problem Set 4A
# Name: <your name here>
# Collaborators:
# Time Spent: x:xx

def get_permutations(sequence):
    '''
    Enumerate all permutations of a given string

    sequence (string): an arbitrary string to permute. Assume that it is a
    non-empty string.  

    You MUST use recursion for this part. Non-recursive solutions will not be
    accepted.

    Returns: a list of all permutations of sequence

    Example:
    >>> get_permutations('abc')
    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']

    Note: depending on your implementation, you may return the permutations in
    a different order than what is listed here.
    '''

    l = list(sequence)

    def get_p(l):

        if len(l) == 1:
            return l

        else:
            permutations = []
            for char in l:
                l_copy = l[:]
                l_copy.remove(char)
                subper = get_p(l_copy)
                for index in range(len(subper)):
                    subper[index] = char + subper[index]
                permutations += subper
            return permutations

    return get_p(l)



if __name__ == '__main__':
#    #EXAMPLE
#    example_input = 'abc'
#    print('Input:', example_input)
#    print('Expected Output:', ['abc', 'acb', 'bac', 'bca', 'cab', 'cba'])
#    print('Actual Output:', get_permutations(example_input))
    
#    # Put three example test cases here (for your sanity, limit your inputs
#    to be three characters or fewer as you will have n! permutations for a 
#    sequence of length n)

    example_input_1 = 'a'
    example_input_2 = 'abc'
    example_input_3 = '* !'
    
    print('Input1:', example_input_1)
    print('Expected Output:',['a'])
    print('Actual Output:', get_permutations(example_input_1))

    print('Input1:', example_input_2)
    print('Expected Output:',['abc', 'acb', 'bac', 'bca', 'cab', 'cba'])
    print('Actual Output:', get_permutations(example_input_2))

    print('Input1:', example_input_3)
    print('Expected Output:',['* !', '*! ', ' *!', ' !*', '!* ', '! *'])
    print('Actual Output:', get_permutations(example_input_3))
    

